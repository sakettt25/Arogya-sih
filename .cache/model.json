{
    "expiry": 1758393393.9695523,
    "data": {
        "677c1bb26eb563180f7173f1": {
            "id": "677c1bb26eb563180f7173f1",
            "name": "Llama 3.3 70B Instruct Turbo",
            "description": "Llama 3.1 is an auto-regressive language model that uses an optimized transformer architecture. The tuned versions use supervised fine-tuning (SFT) and reinforcement learning with human feedback (RLHF) to align with human preferences for helpfulness and safety.",
            "supplier": {
                "id": 17845,
                "name": "Together AI",
                "code": "together-ai"
            },
            "version": "meta-llama/Llama-3.3-70B-Instruct-Turbo",
            "license": null,
            "privacy": {
                "_value_": "Private",
                "_name_": "PRIVATE",
                "__objclass__": "{'_generate_next_value_': <function Enum._generate_next_value_ at 0x0000027A24E3CC10>, '__module__': 'aixplain.enums.privacy', '__doc__': 'Enumeration of possible privacy levels.\\n\\n    This enum defines the different levels of privacy that can be associated with\\n    an asset or resource, including public, private, and restricted privacy levels.\\n\\n    Attributes:\\n        PUBLIC (str): Public privacy level.\\n        PRIVATE (str): Private privacy level.\\n        RESTRICTED (str): Restricted privacy level.\\n    ', '_member_names_': ['PUBLIC', 'PRIVATE', 'RESTRICTED'], '_member_map_': {'PUBLIC': <Privacy.PUBLIC: 'Public'>, 'PRIVATE': <Privacy.PRIVATE: 'Private'>, 'RESTRICTED': <Privacy.RESTRICTED: 'Restricted'>}, '_member_type_': <class 'object'>, '_value2member_map_': {'Public': <Privacy.PUBLIC: 'Public'>, 'Private': <Privacy.PRIVATE: 'Private'>, 'Restricted': <Privacy.RESTRICTED: 'Restricted'>}, 'PUBLIC': <Privacy.PUBLIC: 'Public'>, 'PRIVATE': <Privacy.PRIVATE: 'Private'>, 'RESTRICTED': <Privacy.RESTRICTED: 'Restricted'>, '__new__': <function Enum.__new__ at 0x0000027A24E3CB80>}"
            },
            "cost": {
                "price": 8.8e-07,
                "unitType": "TOKEN",
                "unitTypeScale": null
            },
            "api_key": "8da018db2e372b42914b5a29b7fe14469d15888950d6873cfdc7de9c4ae75ea6",
            "additional_info": {
                "code": "",
                "parameters": {
                    "language": [
                        "en"
                    ],
                    "temperature": [
                        "0"
                    ],
                    "top_p": [
                        "0.7"
                    ],
                    "top_k": [
                        "50"
                    ],
                    "max_tokens": [
                        "2048"
                    ],
                    "repetition_penalty": [
                        "1"
                    ],
                    "history": [
                        ""
                    ]
                },
                "inputs": [],
                "attributes": null
            },
            "url": "https://models.aixplain.com/api/v1/execute",
            "backend_url": "https://platform-api.aixplain.com",
            "function": "text-generation",
            "is_subscribed": false,
            "created_at": "2025-01-06 21:28:04.473000+00:00",
            "input_params": {
                "text": {
                    "name": "Text",
                    "code": "text",
                    "required": true,
                    "isFixed": false,
                    "dataType": "text",
                    "dataSubType": "text",
                    "multipleValues": false,
                    "defaultValues": []
                },
                "temperature": {
                    "name": "Temperature",
                    "code": "temperature",
                    "required": false,
                    "isFixed": false,
                    "dataType": "number",
                    "dataSubType": "number",
                    "multipleValues": false,
                    "defaultValues": []
                },
                "prompt": {
                    "name": "Prompt",
                    "code": "prompt",
                    "required": false,
                    "isFixed": false,
                    "dataType": "text",
                    "dataSubType": "text",
                    "multipleValues": false
                },
                "context": {
                    "name": "Context",
                    "code": "context",
                    "required": false,
                    "isFixed": false,
                    "dataType": "text",
                    "dataSubType": "text",
                    "multipleValues": false
                },
                "language": {
                    "name": "Language",
                    "code": "language",
                    "required": false,
                    "isFixed": true,
                    "dataType": "label",
                    "dataSubType": "label",
                    "multipleValues": false,
                    "defaultValues": []
                },
                "script": {
                    "name": "Script",
                    "code": "script",
                    "required": false,
                    "isFixed": true,
                    "dataType": "label",
                    "dataSubType": "label",
                    "multipleValues": false,
                    "defaultValues": []
                }
            },
            "output_params": {
                "data": {
                    "name": "Text",
                    "code": "data",
                    "defaultValue": [],
                    "dataType": "text"
                }
            },
            "model_params": {
                "text": {
                    "required": true,
                    "value": null
                },
                "template": {
                    "required": false,
                    "value": null
                },
                "prompt": {
                    "required": false,
                    "value": null
                },
                "context": {
                    "required": false,
                    "value": null
                },
                "language": {
                    "required": true,
                    "value": null
                },
                "script": {
                    "required": false,
                    "value": null
                },
                "temperature": {
                    "required": false,
                    "value": null
                },
                "top_p": {
                    "required": false,
                    "value": null
                },
                "top_k": {
                    "required": false,
                    "value": null
                },
                "max_tokens": {
                    "required": false,
                    "value": null
                },
                "repetition_penalty": {
                    "required": false,
                    "value": null
                },
                "history": {
                    "required": false,
                    "value": null
                }
            },
            "supports_streaming": true,
            "function_type": {
                "_value_": "ai",
                "_name_": "AI",
                "__objclass__": "{'_generate_next_value_': <function Enum._generate_next_value_ at 0x0000027A24E3CC10>, '__module__': 'aixplain.enums.function_type', '__doc__': 'Enumeration of function types in the aiXplain system.\\n\\n    This enum defines the different types of functions and services available\\n    in the system, including AI models, data processing utilities, and\\n    integration components.\\n\\n    Attributes:\\n        AI (str): Artificial Intelligence function type.\\n        SEGMENTOR (str): Data segmentation function type.\\n        RECONSTRUCTOR (str): Data reconstruction function type.\\n        UTILITY (str): Utility function type.\\n        METRIC (str): Metric/evaluation function type.\\n        SEARCH (str): Search function type.\\n        INTEGRATION (str): Integration connector function type. # i.e. slack\\n        CONNECTION (str): Connection function type. # slack - action\\n        MCP_CONNECTION (str): MCP connection function type.\\n        MCPSERVER (str): MCP server is for on-prem solution. It should be treated like a model. # ONPREM_MCP_MODEL\\n    ', '_member_names_': ['AI', 'SEGMENTOR', 'RECONSTRUCTOR', 'UTILITY', 'METRIC', 'SEARCH', 'INTEGRATION', 'CONNECTION', 'MCP_CONNECTION', 'MCPSERVER'], '_member_map_': {'AI': <FunctionType.AI: 'ai'>, 'SEGMENTOR': <FunctionType.SEGMENTOR: 'segmentor'>, 'RECONSTRUCTOR': <FunctionType.RECONSTRUCTOR: 'reconstructor'>, 'UTILITY': <FunctionType.UTILITY: 'utility'>, 'METRIC': <FunctionType.METRIC: 'metric'>, 'SEARCH': <FunctionType.SEARCH: 'search'>, 'INTEGRATION': <FunctionType.INTEGRATION: 'connector'>, 'CONNECTION': <FunctionType.CONNECTION: 'connection'>, 'MCP_CONNECTION': <FunctionType.MCP_CONNECTION: 'mcpconnection'>, 'MCPSERVER': <FunctionType.MCPSERVER: 'mcpserver'>}, '_member_type_': <class 'object'>, '_value2member_map_': {'ai': <FunctionType.AI: 'ai'>, 'segmentor': <FunctionType.SEGMENTOR: 'segmentor'>, 'reconstructor': <FunctionType.RECONSTRUCTOR: 'reconstructor'>, 'utility': <FunctionType.UTILITY: 'utility'>, 'metric': <FunctionType.METRIC: 'metric'>, 'search': <FunctionType.SEARCH: 'search'>, 'connector': <FunctionType.INTEGRATION: 'connector'>, 'connection': <FunctionType.CONNECTION: 'connection'>, 'mcpconnection': <FunctionType.MCP_CONNECTION: 'mcpconnection'>, 'mcpserver': <FunctionType.MCPSERVER: 'mcpserver'>}, 'AI': <FunctionType.AI: 'ai'>, 'SEGMENTOR': <FunctionType.SEGMENTOR: 'segmentor'>, 'RECONSTRUCTOR': <FunctionType.RECONSTRUCTOR: 'reconstructor'>, 'UTILITY': <FunctionType.UTILITY: 'utility'>, 'METRIC': <FunctionType.METRIC: 'metric'>, 'SEARCH': <FunctionType.SEARCH: 'search'>, 'INTEGRATION': <FunctionType.INTEGRATION: 'connector'>, 'CONNECTION': <FunctionType.CONNECTION: 'connection'>, 'MCP_CONNECTION': <FunctionType.MCP_CONNECTION: 'mcpconnection'>, 'MCPSERVER': <FunctionType.MCPSERVER: 'mcpserver'>, '__new__': <function Enum.__new__ at 0x0000027A24E3CB80>}"
            },
            "status": "onboarded",
            "temperature": 0.0
        }
    }
}